{"ast":null,"code":"import _regeneratorRuntime from \"/Users/miteshpatel/Desktop/falgu_patel-eog-react-assessment/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchFetchChartMetric),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(ChartMetricAppLoad);\n\nimport { takeEvery, call, put, cancel, all } from \"redux-saga/effects\";\nimport API from \"../api\";\nimport * as actions from \"../actions\";\n\nfunction watchFetchChartMetric(action) {\n  var _ref, error, data;\n\n  return _regeneratorRuntime.wrap(function watchFetchChartMetric$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(API.getChartMetricData);\n\n        case 2:\n          _ref = _context.sent;\n          error = _ref.error;\n          data = _ref.data;\n\n          if (!error) {\n            _context.next = 12;\n            break;\n          }\n\n          console.log({\n            error: error\n          });\n          _context.next = 9;\n          return put({\n            type: actions.API_ERROR,\n            code: error.code\n          });\n\n        case 9:\n          _context.next = 11;\n          return cancel();\n\n        case 11:\n          return _context.abrupt(\"return\");\n\n        case 12:\n          _context.next = 14;\n          return put({\n            type: actions.CHART_METRIC_DATA_RECEIVED,\n            data: data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction ChartMetricAppLoad() {\n  return _regeneratorRuntime.wrap(function ChartMetricAppLoad$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeEvery(actions.FETCH_CHART_METRIC, watchFetchChartMetric)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nexport default [ChartMetricAppLoad];","map":{"version":3,"sources":["/Users/miteshpatel/Desktop/falgu_patel-eog-react-assessment/src/store/sagas/Chart.js"],"names":["watchFetchChartMetric","ChartMetricAppLoad","takeEvery","call","put","cancel","all","API","actions","action","getChartMetricData","error","data","console","log","type","API_ERROR","code","CHART_METRIC_DATA_RECEIVED","FETCH_CHART_METRIC"],"mappings":";;;;yBAIUA,qB;;;yBAWAC,kB;;AAfV,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;;AAEA,SAAUR,qBAAV,CAAgCS,MAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACyB,iBAAMN,IAAI,CAAEI,GAAG,CAACG,kBAAN,CAAV;;AADzB;AAAA;AACUC,UAAAA,KADV,QACUA,KADV;AACiBC,UAAAA,IADjB,QACiBA,IADjB;;AAAA,eAEOD,KAFP;AAAA;AAAA;AAAA;;AAGIE,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,YAAAA,KAAK,EAALA;AAAF,WAAZ;AAHJ;AAII,iBAAMP,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEP,OAAO,CAACQ,SAAhB;AAA2BC,YAAAA,IAAI,EAAEN,KAAK,CAACM;AAAvC,WAAD,CAAT;;AAJJ;AAAA;AAKI,iBAAMZ,MAAM,EAAZ;;AALJ;AAAA;;AAAA;AAAA;AAQE,iBAAMD,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEP,OAAO,CAACU,0BAAhB;AAA4CN,YAAAA,IAAI,EAAJA;AAA5C,WAAD,CAAT;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUX,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,GAAG,CAAC,CACNJ,SAAS,CAACM,OAAO,CAACW,kBAAT,EAA6BnB,qBAA7B,CADH,CAAD,CAAT;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,CAACC,kBAAD,CAAf","sourcesContent":["import { takeEvery, call, put, cancel, all } from \"redux-saga/effects\";\r\nimport API from \"../api\";\r\nimport * as actions from \"../actions\";\r\n\r\nfunction* watchFetchChartMetric(action) {\r\n   const {error, data} = yield call (API.getChartMetricData);\r\n   if (error) {\r\n    console.log({ error });\r\n    yield put({ type: actions.API_ERROR, code: error.code });\r\n    yield cancel();\r\n    return;\r\n  }\r\n  yield put({ type: actions.CHART_METRIC_DATA_RECEIVED, data})\r\n}\r\n\r\nfunction* ChartMetricAppLoad() {\r\n    yield all([\r\n        takeEvery(actions.FETCH_CHART_METRIC, watchFetchChartMetric),\r\n      ]);\r\n}\r\n\r\nexport default [ChartMetricAppLoad];"]},"metadata":{},"sourceType":"module"}